# encoding: UTF-8

require 'date'
require 'rake'
require 'rake/clean'
require 'rake/gempackagetask'
require 'rake/rdoctask'
require 'rake/testtask'
require 'rcov/rcovtask'

GIT_VERSION = `git describe --dirty --always`
BUILD_DATE = DateTime.now

# The Gem packaging will not accept default git version numbers so we present
# a default of 0.0.0 where the version tag cannot be represented.
def maybe_git_version(raw_git_version)
  default = '0.0.0'
  version = ENV['GENOTYPING_VERSION'] || raw_git_version.strip

  if (/^(\d+\.\d+\.\d+)$/.match(version))
    return version
  else
    warn "version string #{version} not in canonical format, defaulting to #{default}"
    return default
  end
end

spec = Gem::Specification.new do |spec|
  spec.name = 'genotyping-workflows'
  spec.version = maybe_git_version(GIT_VERSION)
  spec.add_dependency('percolate', '>= 1.0.0')
  spec.extra_rdoc_files = ['README', 'LICENSE']
  spec.summary = 'WTSI genotyping workflows.'
  spec.description = 'WTSI genotyping workflows for the Illumina Infinium' +
      'platform.'
  spec.author = 'Keith James'
  spec.email = 'kdj@sanger.ac.uk'
  spec.executables = []
  spec.files = %w(LICENSE README Rakefile) + Dir.glob('{bin,lib,spec}/**/*')
  spec.require_path = 'lib'
  spec.bindir = 'bin'
end

task :test => [:write_version_module]
task :gem  => [:write_version_module]

desc "Write the current version to a module"
task :write_version_module do
  f = File.open('lib/genotyping/git_version.rb', 'w')
  f.puts('module Genotyping')
  f.puts("  VERSION = '#{spec.version}'")
  f.puts("  YEAR = '#{BUILD_DATE.year}'")
  f.puts('end');
  f.close
end

Rake::GemPackageTask.new(spec) do |pack|
  pack.gem_spec = spec
  pack.need_tar = true
  pack.need_zip = false
end

Rake::RDocTask.new do |rdoc|
  files =['README', 'LICENSE', 'lib/**/*.rb']
  rdoc.rdoc_files.add(files)
  rdoc.main = "README" # page to start on
  rdoc.title = "Genotyping Workflows Documentation"
  rdoc.rdoc_dir = 'doc/rdoc' # rdoc output folder
  rdoc.options << '--line-numbers'
end

Rake::TestTask.new do |t|
  t.test_files = FileList['test/**/*.rb']
end

Rcov::RcovTask.new do |rcov|
  rcov.pattern = FileList['test/**/*.rb']
  rcov.output_dir = 'coverage'
  rcov.verbose = true
  rcov.rcov_opts << "--sort coverage -x 'rcov,ruby'"
end
